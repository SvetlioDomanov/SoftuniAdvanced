package com.company;

import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = Integer.parseInt(scanner.nextLine());
        int moneyCollected = 0;
        boolean foundAPillar = false;
        boolean isMoneyCollected = false;
        int[] pillarOne = {-1,-1};
        int[] pillarTwo = {-1,-1};
        int startingRow=0;
        int startingCol=0;
        char[][] matrix = new char[size][size];
        for(int i=0;i<size;i++){
            String line = scanner.nextLine();
            matrix[i] = line.toCharArray();
        }
        for(int row = 0; row<size;row++){
            for(int col = 0; col<size;col++){
                if(matrix[row][col]=='P'){
                    if(foundAPillar){
                        pillarTwo[0]=row;
                        pillarTwo[1]=col;
                    }
                    else{
                        pillarOne[0]=row;
                        pillarOne[1]=col;
                        foundAPillar=true;
                    }
                }
                if(matrix[row][col] == 'S'){
                    startingRow = row;
                    startingCol = col;
                }
            }
        }
        int[] positions = {startingRow,startingCol};
        boolean endGoal=false;
        while(!endGoal){
            String command = scanner.nextLine();
            int currentRow = positions[0];
            int currentCol = positions[1];
            endGoal = validMove(command,currentRow,currentCol,size);
            if(endGoal)break;
            else{
                positions = move(command,currentRow,currentCol,size);
            }
            if(Arrays.equals(positions, pillarOne)){
                positions=pillarTwo;
                matrix[pillarOne[0]][pillarOne[1]] = '-';
                matrix[pillarTwo[0]][pillarTwo[1]] = '-';
            }
            else if(Arrays.equals(positions, pillarTwo)){
                positions=pillarOne;
                matrix[pillarOne[0]][pillarOne[1]] = '-';
                matrix[pillarTwo[0]][pillarTwo[1]] = '-';
            }
            if(Character.isDigit(matrix[positions[0]][positions[1]])){
                moneyCollected+=Integer.parseInt(String.valueOf(matrix[positions[0]][positions[1]]));
                matrix[positions[0]][positions[1]] = '-';
            }
             isMoneyCollected = moneyCollected>=50;
            if(isMoneyCollected){
                endGoal=true;
            }
        }
        if(isMoneyCollected){
            System.out.println("Good news! You succeeded in collecting enough money!");
            matrix[positions[0]][positions[1]] = 'S';
        }
        else{
            System.out.println("Bad news! You are out of the pastry shop.");

        }
        System.out.println("Money: " + moneyCollected);
        matrix[startingRow][startingCol] = '-';
        for(int row = 0; row<size;row++){
            for(int col = 0; col<size;col++){
                System.out.print(matrix[row][col]);
            }
            System.out.println();
        }
    }

    private static boolean validMove(String command, int currentRow, int currentCol, int size) {
        switch (command){
            case "up":
                if(currentRow == 0){
                    return true;
                }
                break;
            case "down":
                if(currentRow == size-1){
                    return true;
                }
                break;
            case "left":
                if(currentCol==0){
                    return true;
                }
                break;
            case "right":
                if(currentCol==size-1){
                    return true;
                }
                break;
        }
        return false;
    }

    private static int[] move(String command, int currentRow, int currentCol, int size) {
        switch (command){
            case "up":
                    currentRow--;
                break;
            case "down":
                currentRow++;
                break;
            case "left":
                currentCol--;
                break;
            case "right":
                 currentCol++;
                break;
        }
        return new int[]{currentRow,currentCol};

    }
}
